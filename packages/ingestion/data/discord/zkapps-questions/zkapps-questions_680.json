{
  "guild": {
    "id": "484437221055922177",
    "name": "Mina Protocol",
    "iconUrl": "https://cdn.discordapp.com/icons/484437221055922177/60f5907d2f7e3804b704a7153cae7768.png?size=512"
  },
  "channel": {
    "id": "1151308771017105499",
    "type": "GuildPublicThread",
    "categoryId": "1047214314349658172",
    "category": "zkapps-questions",
    "name": "Both publicInput and publicOutput",
    "topic": null
  },
  "dateRange": {
    "after": null,
    "before": null
  },
  "exportedAt": "2025-04-24T14:24:24.65265+04:00",
  "messages": [
    {
      "id": "1151308771017105499",
      "type": "Default",
      "timestamp": "2023-09-13T04:10:01.293+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Are there any examples out in the wild of a ZkProgram with both publicInput and publicOutput? Something _like_ https://github.com/o1-labs/o1js/blob/c3974f83053cefd050fcf458bc97afc5bd384415/src/examples/program-with-input.ts#L36. In particular, I'm interesting in validating a use-case where I want prove that the publicOutput of one SelfProof is equal to the publicInput of a second SelfProof. Is there a nicer/nice way to do this? I guess I can just hold on to the Field value and include it as another parameter in an \"inductiveCase\" method?",
      "author": {
        "id": "499071680841252884",
        "name": "carsonfarmer",
        "discriminator": "0000",
        "nickname": "carsonfarmer",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/499071680841252884/822d6751a0bde1be34a6d548ba56043c.png?size=512"
      },
      "attachments": [],
      "embeds": [
        {
          "title": "o1js/src/examples/program-with-input.ts at c3974f83053cefd050fcf458...",
          "url": "https://github.com/o1-labs/o1js/blob/c3974f83053cefd050fcf458bc97afc5bd384415/src/examples/program-with-input.ts",
          "timestamp": null,
          "description": "TypeScript framework for zk-SNARKs and zkApps. Contribute to o1-labs/o1js development by creating an account on GitHub.",
          "color": "#1E2327",
          "thumbnail": {
            "url": "https://images-ext-1.discordapp.net/external/KuarSrhHJVawJO0NhQs_jFSf6pslZyEwzab72WNJre4/https/opengraph.githubassets.com/509ca794fe03b430e04f7e0bea33d7def75b1032e275dfdf809fffb86c676f94/o1-labs/o1js",
            "width": 1200,
            "height": 600
          },
          "images": [],
          "fields": []
        }
      ],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1151530489493074042",
      "type": "Default",
      "timestamp": "2023-09-13T18:51:03.097+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "> In particular, I'm interesting in validating a use-case where I want prove that the publicOutput of one SelfProof is equal to the publicInput of a second SelfProof. Is there a nicer/nice way to do this? I guess I can just hold on to the Field value and include it as another parameter in an \"inductiveCase\" method?\n> \nIf a `SelfProof` is part of your inputs, then you can already access its public output at `proof.publicOutput`. So no need to use another parameter",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1151530792388919367",
      "type": "Default",
      "timestamp": "2023-09-13T18:52:15.313+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Here's an example I wrote which uses public input AND output:\nhttps://github.com/mitschabaude/o1js-offchain-state/blob/main/contracts/src/action-state-prover.ts#L106-L108\nHaving both is very natural for incremental computation like in that example",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [
        {
          "emoji": {
            "id": "",
            "name": "\uD83D\uDE4C",
            "code": "raised_hands",
            "isAnimated": false,
            "imageUrl": "https://cdn.jsdelivr.net/gh/twitter/twemoji@latest/assets/svg/1f64c.svg"
          },
          "count": 1,
          "users": [
            {
              "id": "499071680841252884",
              "name": "carsonfarmer",
              "discriminator": "0000",
              "nickname": "carsonfarmer",
              "isBot": false,
              "avatarUrl": "https://cdn.discordapp.com/avatars/499071680841252884/822d6751a0bde1be34a6d548ba56043c.png?size=512"
            }
          ]
        }
      ],
      "mentions": []
    },
    {
      "id": "1151584069184917656",
      "type": "Default",
      "timestamp": "2023-09-13T22:23:57.491+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Yes this is exactly what I need/want it for in fact. So thanks for the example! Very nice approach.",
      "author": {
        "id": "499071680841252884",
        "name": "carsonfarmer",
        "discriminator": "0000",
        "nickname": "carsonfarmer",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/499071680841252884/822d6751a0bde1be34a6d548ba56043c.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    }
  ],
  "messageCount": 4
}