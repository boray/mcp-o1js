{
  "guild": {
    "id": "484437221055922177",
    "name": "Mina Protocol",
    "iconUrl": "https://cdn.discordapp.com/icons/484437221055922177/60f5907d2f7e3804b704a7153cae7768.png?size=512"
  },
  "channel": {
    "id": "1186443680857456650",
    "type": "GuildPublicThread",
    "categoryId": "1047214314349658172",
    "category": "zkapps-questions",
    "name": "Encoding a program's execution",
    "topic": null
  },
  "dateRange": {
    "after": null,
    "before": null
  },
  "exportedAt": "2025-04-24T12:40:45.0023501+04:00",
  "messages": [
    {
      "id": "1186443680857456650",
      "type": "Default",
      "timestamp": "2023-12-19T03:03:36.574+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Hey friends,  first off, I'm not sure if I'm asking the right question so please clarify if i'm off base, but what would be an efficient way to encode a program's execution into a zkApp/zkProgram? For example, let's say we have a program that compiles down to assembly and has 10 instructions, how would I go about putting that into a smart contract?",
      "author": {
        "id": "1043967769953173565",
        "name": "devtonite001",
        "discriminator": "0000",
        "nickname": "devtonite",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1186444145745727518",
      "type": "Default",
      "timestamp": "2023-12-19T03:05:27.412+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Currently working on zkBUIDL Bounties: https://github.com/Devtonite/onchain-zkbuidl",
      "author": {
        "id": "1043967769953173565",
        "name": "devtonite001",
        "discriminator": "0000",
        "nickname": "devtonite",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
      },
      "attachments": [],
      "embeds": [
        {
          "title": "GitHub - Devtonite/onchain-zkbuidl",
          "url": "https://github.com/Devtonite/onchain-zkbuidl",
          "timestamp": null,
          "description": "Contribute to Devtonite/onchain-zkbuidl development by creating an account on GitHub.",
          "color": "#1E2327",
          "thumbnail": {
            "url": "https://images-ext-1.discordapp.net/external/ejfCF0gGRU7pyICC9CUvHGAAxFgCUoMipVBqiZvhPZ0/https/opengraph.githubassets.com/5b041849a050f69351cd1a5617968e598a78359693be1798e7f18e2b86b9e0fe/Devtonite/onchain-zkbuidl",
            "width": 1200,
            "height": 600
          },
          "images": [],
          "fields": []
        }
      ],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1186444537036558487",
      "type": "Default",
      "timestamp": "2023-12-19T03:07:00.703+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Oh, also, this question is assuming there's another way to do this without building the entire compiler with o1js",
      "author": {
        "id": "1043967769953173565",
        "name": "devtonite001",
        "discriminator": "0000",
        "nickname": "devtonite",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1186444789940494376",
      "type": "Default",
      "timestamp": "2023-12-19T03:08:01+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Of course, doing that, we'd be able to prove any computation, but i'm more looking for a way to verify a user correctly ran a solution against a unit test and did not just make up a result for during their run",
      "author": {
        "id": "1043967769953173565",
        "name": "devtonite001",
        "discriminator": "0000",
        "nickname": "devtonite",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1186969334304735252",
      "type": "Default",
      "timestamp": "2023-12-20T13:52:22.122+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Hello @devtonite. If I have understood your question correctly, you are trying to verify a ZkProgram's execution result inside a smart contract method. Am I right? If this is the case, you can put the proof of your ZKProgram as an argument to your smart contract. Then, inside your smart contract you can verify the proof (by simply calling `.verify()` and use publicOutput's of the ZKProgram to perform your computation. ZKPrograms can also have recursion (actually that is the most important reason why we have them), so you can have any off chain computation on your client side, and then just send the final proof of execution to the smart contract to use computation results inside your smart contract trustlessly. Please see this link for more information: https://docs.minaprotocol.com/zkapps/o1js/recursion. I hope this solves your issue. If you meant something completely different, please let me know so I can help you \uD83D\uDE42",
      "author": {
        "id": "523199492716101653",
        "name": "yunusgurlek",
        "discriminator": "0000",
        "nickname": "Yunus Gürlek",
        "color": "#8B50FF",
        "isBot": false,
        "roles": [
          {
            "id": "846838836649525259",
            "name": "Mina Foundation",
            "color": "#8B50FF",
            "position": 138
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "1090136219045867601",
            "name": "Gov Focus Group",
            "color": "#C02020",
            "position": 107
          },
          {
            "id": "1204059991435251723",
            "name": "Technical Reviewer - Navigators",
            "color": "#E74C3C",
            "position": 105
          },
          {
            "id": "1044272767060672624",
            "name": "Cohort 0 Mentor",
            "color": "#A84300",
            "position": 102
          },
          {
            "id": "754653466344947782",
            "name": "QA Task Force",
            "color": "#B2F3B8",
            "position": 80
          },
          {
            "id": "893400661759246366",
            "name": "Applicant",
            "color": null,
            "position": 24
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/embed/avatars/0.png"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "1043967769953173565",
          "name": "devtonite001",
          "discriminator": "0000",
          "nickname": "devtonite",
          "color": null,
          "isBot": false,
          "roles": [],
          "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
        }
      ]
    },
    {
      "id": "1187033651574214686",
      "type": "Default",
      "timestamp": "2023-12-20T18:07:56.554+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "@Yunus Gürlek thank you. Yes I was initially looking at Zkprogram as well, I believe that's what I'll be using. But my question was something in the lines of \"is there a way to prove some execution of a program in a different language (rust/solidity) without modeling the entire language's semantics in an o1js circuit\"?",
      "author": {
        "id": "1043967769953173565",
        "name": "devtonite001",
        "discriminator": "0000",
        "nickname": "devtonite",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "523199492716101653",
          "name": "yunusgurlek",
          "discriminator": "0000",
          "nickname": "Yunus Gürlek",
          "color": "#8B50FF",
          "isBot": false,
          "roles": [
            {
              "id": "846838836649525259",
              "name": "Mina Foundation",
              "color": "#8B50FF",
              "position": 138
            },
            {
              "id": "1075313326499823676",
              "name": "zkApp E2E Tester",
              "color": "#E74C3C",
              "position": 117
            },
            {
              "id": "1090136219045867601",
              "name": "Gov Focus Group",
              "color": "#C02020",
              "position": 107
            },
            {
              "id": "1204059991435251723",
              "name": "Technical Reviewer - Navigators",
              "color": "#E74C3C",
              "position": 105
            },
            {
              "id": "1044272767060672624",
              "name": "Cohort 0 Mentor",
              "color": "#A84300",
              "position": 102
            },
            {
              "id": "754653466344947782",
              "name": "QA Task Force",
              "color": "#B2F3B8",
              "position": 80
            },
            {
              "id": "893400661759246366",
              "name": "Applicant",
              "color": null,
              "position": 24
            }
          ],
          "avatarUrl": "https://cdn.discordapp.com/embed/avatars/0.png"
        }
      ]
    },
    {
      "id": "1187034198763118613",
      "type": "Default",
      "timestamp": "2023-12-20T18:10:07.014+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Basically, i'm building a zkapp that let's one submit a unit test with a token bounty, which can then be redeemed if you submit a proof of a correct solution to the unit test. In this scenario, what would be the most straightforward way to prove a user ran the unit test with the code solution correctly?",
      "author": {
        "id": "1043967769953173565",
        "name": "devtonite001",
        "discriminator": "0000",
        "nickname": "devtonite",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1187040411798220921",
      "type": "Default",
      "timestamp": "2023-12-20T18:34:48.317+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "You don't want to model the semantics of a language, but the VM in which the compiled assembly runs in. Still you probably don't want to go into that in o1js.",
      "author": {
        "id": "141272134633783297",
        "name": "faseris",
        "discriminator": "0000",
        "nickname": "Faserisko",
        "color": "#E5DFBB",
        "isBot": false,
        "roles": [
          {
            "id": "1280898028529778789",
            "name": "Community Builder",
            "color": "#E5DFBB",
            "position": 26
          },
          {
            "id": "1285544625037115557",
            "name": "MinaCon",
            "color": "#FAFFD6",
            "position": 25
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/141272134633783297/906de2260ca3617d3a9792834a64e3c8.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1187043595627270224",
      "type": "Default",
      "timestamp": "2023-12-20T18:47:27.401+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "I know only about one project that can, in theory, do it - RISC ZERO. In practice, it will be veeeery slow or impossible.\n\nIf your program is an assembler with 10 instructions, there are a lot of xor, shift, etc. operations in o1js, so it would be easier to rewrite specific programs using o1js. Don't think that it is possible with rust/solidity.",
      "author": {
        "id": "964566918482784306",
        "name": "dfst.io",
        "discriminator": "0000",
        "nickname": "DFST",
        "color": "#FA7504",
        "isBot": false,
        "roles": [
          {
            "id": "1182371055923376168",
            "name": "Mina Navigator",
            "color": "#FA7504",
            "position": 100
          },
          {
            "id": "1150768164850913322",
            "name": "zkIgnite Cohort 2",
            "color": "#E97404",
            "position": 96
          },
          {
            "id": "1285544625037115557",
            "name": "MinaCon",
            "color": "#FAFFD6",
            "position": 25
          },
          {
            "id": "1205541869375979601",
            "name": "UMT",
            "color": "#FFFFFF",
            "position": 22
          },
          {
            "id": "1220065449098743838",
            "name": "Node-Operations",
            "color": "#FFFFFF",
            "position": 20
          },
          {
            "id": "1220064445863038996",
            "name": "zkApps",
            "color": "#FFFFFF",
            "position": 19
          },
          {
            "id": "1220065628602503188",
            "name": "Testing",
            "color": "#FFFFFF",
            "position": 18
          },
          {
            "id": "1291345674213920768",
            "name": "Rust-Node",
            "color": "#FFF7F7",
            "position": 17
          },
          {
            "id": "1259816280605851648",
            "name": "Links and Images",
            "color": "#FFFFFE",
            "position": 12
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/guilds/484437221055922177/users/964566918482784306/avatars/6d2f9b5ac3d3e9135840e45e13230dd8.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1187165536434532403",
      "type": "Reply",
      "timestamp": "2023-12-21T02:52:00.355+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "haha yeah that is indeed what i'm trying to avoid, so I was asking if there would/could be an alternative that achieves a similar result without doing all that",
      "author": {
        "id": "1043967769953173565",
        "name": "devtonite001",
        "discriminator": "0000",
        "nickname": "devtonite",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "141272134633783297",
          "name": "faseris",
          "discriminator": "0000",
          "nickname": "Faserisko",
          "color": "#E5DFBB",
          "isBot": false,
          "roles": [
            {
              "id": "1280898028529778789",
              "name": "Community Builder",
              "color": "#E5DFBB",
              "position": 26
            },
            {
              "id": "1285544625037115557",
              "name": "MinaCon",
              "color": "#FAFFD6",
              "position": 25
            }
          ],
          "avatarUrl": "https://cdn.discordapp.com/avatars/141272134633783297/906de2260ca3617d3a9792834a64e3c8.png?size=512"
        }
      ],
      "reference": {
        "messageId": "1187040411798220921",
        "channelId": "1186443680857456650",
        "guildId": "484437221055922177"
      }
    },
    {
      "id": "1187165856539607111",
      "type": "Reply",
      "timestamp": "2023-12-21T02:53:16.674+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "yes, I was also considering using this if there isn't any other option. If i go with risc0, i would have to have a separate verifier program built on risc0 which would then interact with my o1js contracts. It's definitely AN approach...",
      "author": {
        "id": "1043967769953173565",
        "name": "devtonite001",
        "discriminator": "0000",
        "nickname": "devtonite",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "964566918482784306",
          "name": "dfst.io",
          "discriminator": "0000",
          "nickname": "DFST",
          "color": "#FA7504",
          "isBot": false,
          "roles": [
            {
              "id": "1182371055923376168",
              "name": "Mina Navigator",
              "color": "#FA7504",
              "position": 100
            },
            {
              "id": "1150768164850913322",
              "name": "zkIgnite Cohort 2",
              "color": "#E97404",
              "position": 96
            },
            {
              "id": "1285544625037115557",
              "name": "MinaCon",
              "color": "#FAFFD6",
              "position": 25
            },
            {
              "id": "1205541869375979601",
              "name": "UMT",
              "color": "#FFFFFF",
              "position": 22
            },
            {
              "id": "1220065449098743838",
              "name": "Node-Operations",
              "color": "#FFFFFF",
              "position": 20
            },
            {
              "id": "1220064445863038996",
              "name": "zkApps",
              "color": "#FFFFFF",
              "position": 19
            },
            {
              "id": "1220065628602503188",
              "name": "Testing",
              "color": "#FFFFFF",
              "position": 18
            },
            {
              "id": "1291345674213920768",
              "name": "Rust-Node",
              "color": "#FFF7F7",
              "position": 17
            },
            {
              "id": "1259816280605851648",
              "name": "Links and Images",
              "color": "#FFFFFE",
              "position": 12
            }
          ],
          "avatarUrl": "https://cdn.discordapp.com/guilds/484437221055922177/users/964566918482784306/avatars/6d2f9b5ac3d3e9135840e45e13230dd8.png?size=512"
        }
      ],
      "reference": {
        "messageId": "1187043595627270224",
        "channelId": "1186443680857456650",
        "guildId": "484437221055922177"
      }
    },
    {
      "id": "1187166572872216696",
      "type": "Reply",
      "timestamp": "2023-12-21T02:56:07.461+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "thoughts on encoding some of the characteristics of a foundry result into the zkprogram instead? for example, you can get a JSON file that represents how a test ran in foundry. would using some of the keys from that JSON and putting them into the zkprogram help with trying to prove a computation outside of o1js ran correctly?",
      "author": {
        "id": "1043967769953173565",
        "name": "devtonite001",
        "discriminator": "0000",
        "nickname": "devtonite",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "964566918482784306",
          "name": "dfst.io",
          "discriminator": "0000",
          "nickname": "DFST",
          "color": "#FA7504",
          "isBot": false,
          "roles": [
            {
              "id": "1182371055923376168",
              "name": "Mina Navigator",
              "color": "#FA7504",
              "position": 100
            },
            {
              "id": "1150768164850913322",
              "name": "zkIgnite Cohort 2",
              "color": "#E97404",
              "position": 96
            },
            {
              "id": "1285544625037115557",
              "name": "MinaCon",
              "color": "#FAFFD6",
              "position": 25
            },
            {
              "id": "1205541869375979601",
              "name": "UMT",
              "color": "#FFFFFF",
              "position": 22
            },
            {
              "id": "1220065449098743838",
              "name": "Node-Operations",
              "color": "#FFFFFF",
              "position": 20
            },
            {
              "id": "1220064445863038996",
              "name": "zkApps",
              "color": "#FFFFFF",
              "position": 19
            },
            {
              "id": "1220065628602503188",
              "name": "Testing",
              "color": "#FFFFFF",
              "position": 18
            },
            {
              "id": "1291345674213920768",
              "name": "Rust-Node",
              "color": "#FFF7F7",
              "position": 17
            },
            {
              "id": "1259816280605851648",
              "name": "Links and Images",
              "color": "#FFFFFE",
              "position": 12
            }
          ],
          "avatarUrl": "https://cdn.discordapp.com/guilds/484437221055922177/users/964566918482784306/avatars/6d2f9b5ac3d3e9135840e45e13230dd8.png?size=512"
        }
      ],
      "reference": {
        "messageId": "1187043595627270224",
        "channelId": "1186443680857456650",
        "guildId": "484437221055922177"
      }
    },
    {
      "id": "1187166981498097745",
      "type": "Reply",
      "timestamp": "2023-12-21T02:57:44.885+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "yeah, so basically a MINAxEVM type of thing lol. That would probably have to be it's own dedicated project.",
      "author": {
        "id": "1043967769953173565",
        "name": "devtonite001",
        "discriminator": "0000",
        "nickname": "devtonite",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "141272134633783297",
          "name": "faseris",
          "discriminator": "0000",
          "nickname": "Faserisko",
          "color": "#E5DFBB",
          "isBot": false,
          "roles": [
            {
              "id": "1280898028529778789",
              "name": "Community Builder",
              "color": "#E5DFBB",
              "position": 26
            },
            {
              "id": "1285544625037115557",
              "name": "MinaCon",
              "color": "#FAFFD6",
              "position": 25
            }
          ],
          "avatarUrl": "https://cdn.discordapp.com/avatars/141272134633783297/906de2260ca3617d3a9792834a64e3c8.png?size=512"
        }
      ],
      "reference": {
        "messageId": "1187040411798220921",
        "channelId": "1186443680857456650",
        "guildId": "484437221055922177"
      }
    },
    {
      "id": "1187308134583255080",
      "type": "Reply",
      "timestamp": "2023-12-21T12:18:38.403+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "I think that it is a wise approach. You can ask the user to run the program with inputs that you provide or random inputs and give the result with inputs to o1js ZkProgram to prove that the result is correct. You should have, in this case, two equivalent programs, one in rust/solidity and the other in o1js TypeScript.\n\nBasically, we are going with this design to one of the methods of the formal verifications of the program. There was a good review of those methods in ZK bootcamp - see page 23:",
      "author": {
        "id": "964566918482784306",
        "name": "dfst.io",
        "discriminator": "0000",
        "nickname": "DFST",
        "color": "#FA7504",
        "isBot": false,
        "roles": [
          {
            "id": "1182371055923376168",
            "name": "Mina Navigator",
            "color": "#FA7504",
            "position": 100
          },
          {
            "id": "1150768164850913322",
            "name": "zkIgnite Cohort 2",
            "color": "#E97404",
            "position": 96
          },
          {
            "id": "1285544625037115557",
            "name": "MinaCon",
            "color": "#FAFFD6",
            "position": 25
          },
          {
            "id": "1205541869375979601",
            "name": "UMT",
            "color": "#FFFFFF",
            "position": 22
          },
          {
            "id": "1220065449098743838",
            "name": "Node-Operations",
            "color": "#FFFFFF",
            "position": 20
          },
          {
            "id": "1220064445863038996",
            "name": "zkApps",
            "color": "#FFFFFF",
            "position": 19
          },
          {
            "id": "1220065628602503188",
            "name": "Testing",
            "color": "#FFFFFF",
            "position": 18
          },
          {
            "id": "1291345674213920768",
            "name": "Rust-Node",
            "color": "#FFF7F7",
            "position": 17
          },
          {
            "id": "1259816280605851648",
            "name": "Links and Images",
            "color": "#FFFFFE",
            "position": 12
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/guilds/484437221055922177/users/964566918482784306/avatars/6d2f9b5ac3d3e9135840e45e13230dd8.png?size=512"
      },
      "attachments": [
        {
          "id": "1187308134209945620",
          "url": "https://cdn.discordapp.com/attachments/1186443680857456650/1187308134209945620/Lesson16.pdf?ex=680b455e&is=6809f3de&hm=0b5dd84c9530f8d7e3f8c0a4ba99723c4f29b78958c9fd268b0dfbd113057667&",
          "fileName": "Lesson16.pdf",
          "fileSizeBytes": 7775703
        }
      ],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "1043967769953173565",
          "name": "devtonite001",
          "discriminator": "0000",
          "nickname": "devtonite",
          "color": null,
          "isBot": false,
          "roles": [],
          "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
        }
      ],
      "reference": {
        "messageId": "1187166572872216696",
        "channelId": "1186443680857456650",
        "guildId": "484437221055922177"
      }
    },
    {
      "id": "1187522115340091442",
      "type": "Reply",
      "timestamp": "2023-12-22T02:28:55.391+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "thanks, I'll to try implement it then as best I can. I read through some of the formal verification stuff but it's going a little over my head haha. I understand the idea but not sure how I'd implement it on my app. I'll have to talk to a friend of mine who happens to be learning FV stuff (I believe he's been working with the Coq Theorem prover).",
      "author": {
        "id": "1043967769953173565",
        "name": "devtonite001",
        "discriminator": "0000",
        "nickname": "devtonite",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1043967769953173565/ee4deb3221e9f70132de5f5044865371.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "964566918482784306",
          "name": "dfst.io",
          "discriminator": "0000",
          "nickname": "DFST",
          "color": "#FA7504",
          "isBot": false,
          "roles": [
            {
              "id": "1182371055923376168",
              "name": "Mina Navigator",
              "color": "#FA7504",
              "position": 100
            },
            {
              "id": "1150768164850913322",
              "name": "zkIgnite Cohort 2",
              "color": "#E97404",
              "position": 96
            },
            {
              "id": "1285544625037115557",
              "name": "MinaCon",
              "color": "#FAFFD6",
              "position": 25
            },
            {
              "id": "1205541869375979601",
              "name": "UMT",
              "color": "#FFFFFF",
              "position": 22
            },
            {
              "id": "1220065449098743838",
              "name": "Node-Operations",
              "color": "#FFFFFF",
              "position": 20
            },
            {
              "id": "1220064445863038996",
              "name": "zkApps",
              "color": "#FFFFFF",
              "position": 19
            },
            {
              "id": "1220065628602503188",
              "name": "Testing",
              "color": "#FFFFFF",
              "position": 18
            },
            {
              "id": "1291345674213920768",
              "name": "Rust-Node",
              "color": "#FFF7F7",
              "position": 17
            },
            {
              "id": "1259816280605851648",
              "name": "Links and Images",
              "color": "#FFFFFE",
              "position": 12
            }
          ],
          "avatarUrl": "https://cdn.discordapp.com/guilds/484437221055922177/users/964566918482784306/avatars/6d2f9b5ac3d3e9135840e45e13230dd8.png?size=512"
        }
      ],
      "reference": {
        "messageId": "1187308134583255080",
        "channelId": "1186443680857456650",
        "guildId": "484437221055922177"
      }
    }
  ],
  "messageCount": 15
}