{
  "guild": {
    "id": "484437221055922177",
    "name": "Mina Protocol",
    "iconUrl": "https://cdn.discordapp.com/icons/484437221055922177/60f5907d2f7e3804b704a7153cae7768.png?size=512"
  },
  "channel": {
    "id": "1146051651820593223",
    "type": "GuildPublicThread",
    "categoryId": "1047214314349658172",
    "category": "zkapps-questions",
    "name": "Plonky2 Verifier in SnarkyJS",
    "topic": null
  },
  "dateRange": {
    "after": null,
    "before": null
  },
  "exportedAt": "2025-04-24T14:28:19.8692145+04:00",
  "messages": [
    {
      "id": "1146051651820593223",
      "type": "Default",
      "timestamp": "2023-08-29T16:00:06.404+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Hi! I wanted to know if writing a Plonky2 Verifier was possible in SnarkyJS similar to an implementation in Gnark by Succinct Labs - https://github.com/succinctlabs/gnark-plonky2-verifier\n\nI wanted to implement one as it is part of my ZkIgnite proposal",
      "author": {
        "id": "737971657372729394",
        "name": "shreyaslondhe",
        "discriminator": "0000",
        "nickname": "Schrödinger's Cat",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/737971657372729394/5b8d36d145dd3520998dd74277a1705a.png?size=512"
      },
      "attachments": [],
      "embeds": [
        {
          "title": "GitHub - succinctlabs/gnark-plonky2-verifier",
          "url": "https://github.com/succinctlabs/gnark-plonky2-verifier",
          "timestamp": null,
          "description": "Contribute to succinctlabs/gnark-plonky2-verifier development by creating an account on GitHub.",
          "color": "#1E2327",
          "thumbnail": {
            "url": "https://images-ext-1.discordapp.net/external/SVfui7gyoS9v5Uel7D-ANkf2QGyykO-4S0lEzoDHIB0/https/opengraph.githubassets.com/5b320001e846ec317a89c23c3a04f228e2c3317d41fbf0bbe275d1e9cc8223e6/succinctlabs/gnark-plonky2-verifier",
            "width": 1200,
            "height": 600
          },
          "images": [],
          "fields": []
        }
      ],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1146354101131681832",
      "type": "Default",
      "timestamp": "2023-08-30T12:01:55.939+04:00",
      "timestampEdited": "2023-08-30T12:21:20.742+04:00",
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Everything is possible! \uD83D\uDE4C \n\nSome thoughts: Since plonky2 uses a small field (64 bits) I imagine this to be much easier / more efficient than non-native field arithmetic typically is. For example, a full multiplication result in the plonky2 field (64 + 64 = 128 bits) can be represented in a single native snarkyjs field element.\nStill, emulating the plonky2 arithmetic would heavily benefit from cheap 64 bit range checks. Currently, there is a 64 bit RC in snarkyjs that takes 4 rows IIUC. On the crypto side (kimchi), we already have everything ready to expose a 64-bit RC that only takes 1 row.\n\nI encourage you to try this out! It's a zkIgnite proposal I would strongly endorse.",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [
        {
          "emoji": {
            "id": "",
            "name": "\uD83D\uDD25",
            "code": "fire",
            "isAnimated": false,
            "imageUrl": "https://cdn.jsdelivr.net/gh/twitter/twemoji@latest/assets/svg/1f525.svg"
          },
          "count": 2,
          "users": [
            {
              "id": "301752126491721730",
              "name": "blockbeard",
              "discriminator": "0000",
              "nickname": "angus_m",
              "isBot": false,
              "avatarUrl": "https://cdn.discordapp.com/avatars/301752126491721730/0a8d7f37a46cb3c2ca757f772e60e497.png?size=512"
            },
            {
              "id": "821475820852871199",
              "name": "xendarboh",
              "discriminator": "0000",
              "nickname": "Xendarboh",
              "isBot": false,
              "avatarUrl": "https://cdn.discordapp.com/avatars/821475820852871199/12b5a393446ae4368d133401bf76356a.png?size=512"
            }
          ]
        }
      ],
      "mentions": []
    },
    {
      "id": "1146671913813422160",
      "type": "Default",
      "timestamp": "2023-08-31T09:04:48.387+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Thank you so much for the motivation, I'll keep this thread active for any future questions I have in this project.",
      "author": {
        "id": "737971657372729394",
        "name": "shreyaslondhe",
        "discriminator": "0000",
        "nickname": "Schrödinger's Cat",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/737971657372729394/5b8d36d145dd3520998dd74277a1705a.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1146718907621724203",
      "type": "Default",
      "timestamp": "2023-08-31T12:11:32.584+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "From the rust implementation of Plonky2, there are a lot of places where they have `Vec<Type>` but I cannot do the same in SnarkyJS, as I have to instantiate an array type with `Provable.Array(<type>, <size>)`, how do I tackle this problem?",
      "author": {
        "id": "737971657372729394",
        "name": "shreyaslondhe",
        "discriminator": "0000",
        "nickname": "Schrödinger's Cat",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/737971657372729394/5b8d36d145dd3520998dd74277a1705a.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1146774243690938408",
      "type": "Default",
      "timestamp": "2023-08-31T15:51:25.731+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "You can't do dynamic size in a circuit. Maybe look at the plonky2 verifier circuit to see how they handle that",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1148199926321385503",
      "type": "Default",
      "timestamp": "2023-09-04T14:16:34.958+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "So a workaround I have come up with is to have all the sizes of the array used in a circuit in a JSON file with some prefilled dummy value. then before compiling the circuit, I fill the sizes with actual values in the Plonky2 proof.",
      "author": {
        "id": "737971657372729394",
        "name": "shreyaslondhe",
        "discriminator": "0000",
        "nickname": "Schrödinger's Cat",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/737971657372729394/5b8d36d145dd3520998dd74277a1705a.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [
        {
          "emoji": {
            "id": "",
            "name": "\uD83D\uDC4C",
            "code": "ok_hand",
            "isAnimated": false,
            "imageUrl": "https://cdn.jsdelivr.net/gh/twitter/twemoji@latest/assets/svg/1f44c.svg"
          },
          "count": 1,
          "users": [
            {
              "id": "568421780331692042",
              "name": "mitschabaude",
              "discriminator": "0000",
              "nickname": "gregor",
              "isBot": false,
              "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
            }
          ]
        }
      ],
      "mentions": []
    },
    {
      "id": "1148200946183180350",
      "type": "Default",
      "timestamp": "2023-09-04T14:20:38.112+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "```\nexport interface ProofWithPublicInputs {\n  proof: Proof;\n  public_inputs: any[];\n}\n\nexport interface Proof {\n  wires_cap: string[];\n  plonk_zs_partial_products_cap: string[];\n  quotient_polys_cap: string[];\n  openings: Openings;\n  opening_proof: OpeningProof;\n}\n\nexport interface OpeningProof {\n  commit_phase_merkle_caps: Array<string[]>;\n  query_round_proofs: QueryRoundProof[];\n  final_poly: FinalPoly;\n  pow_witness: number;\n}\n\nexport interface FinalPoly {\n  coeffs: Array<number[]>;\n}\n\nexport interface QueryRoundProof {\n  initial_trees_proof: InitialTreesProof;\n  steps: Step[];\n}\n\nexport interface InitialTreesProof {\n  evals_proofs: Array<Array<number[] | MerkleProofClass>>;\n}\n\nexport interface MerkleProofClass {\n  siblings: string[];\n}\n\nexport interface Step {\n  evals: Array<number[]>;\n  merkle_proof: MerkleProofClass;\n}\n\nexport interface Openings {\n  constants: Array<number[]>;\n  plonk_sigmas: Array<number[]>;\n  wires: Array<number[]>;\n  plonk_zs: Array<number[]>;\n  plonk_zs_next: Array<number[]>;\n  partial_products: Array<number[]>;\n  quotient_polys: Array<number[]>;\n}\n```\n\nThe Plonky2 proof has a schema like this which is super nested, so how do I write the interface for the circuit and how do I write sizes for all of these when it is nested?",
      "author": {
        "id": "737971657372729394",
        "name": "shreyaslondhe",
        "discriminator": "0000",
        "nickname": "Schrödinger's Cat",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/737971657372729394/5b8d36d145dd3520998dd74277a1705a.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1148238585854705765",
      "type": "Default",
      "timestamp": "2023-09-04T16:50:12.109+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Struct creates arbitrarily nested types. I'd just have a function `(sizes) => Struct({ .... proof structure with sizes })`",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1148509067174760488",
      "type": "Default",
      "timestamp": "2023-09-05T10:44:59.881+04:00",
      "timestampEdited": "2023-09-05T11:19:01.629+04:00",
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Got it, thanks!!",
      "author": {
        "id": "737971657372729394",
        "name": "shreyaslondhe",
        "discriminator": "0000",
        "nickname": "Schrödinger's Cat",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/737971657372729394/5b8d36d145dd3520998dd74277a1705a.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    }
  ],
  "messageCount": 9
}