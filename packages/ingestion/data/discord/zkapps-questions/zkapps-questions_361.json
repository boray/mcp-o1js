{
  "guild": {
    "id": "484437221055922177",
    "name": "Mina Protocol",
    "iconUrl": "https://cdn.discordapp.com/icons/484437221055922177/60f5907d2f7e3804b704a7153cae7768.png?size=512"
  },
  "channel": {
    "id": "1215258350577647616",
    "type": "GuildPublicThread",
    "categoryId": "1047214314349658172",
    "category": "zkapps-questions",
    "name": "What is approveBase() in TokenContract and how to use it?",
    "topic": null
  },
  "dateRange": {
    "after": null,
    "before": null
  },
  "exportedAt": "2025-04-24T11:19:24.03383+04:00",
  "messages": [
    {
      "id": "1215258350577647616",
      "type": "Default",
      "timestamp": "2024-03-07T15:22:49.186+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "I use token accounts for storage; no tokens are being transferred or burned, only minted. How should I implement the abstract function approveBase() in this case? The example code is\n```typescript\n@method approveBase(forest: AccountUpdateForest) {\n      this.checkZeroBalanceChange(forest);\n}\n```",
      "author": {
        "id": "964566918482784306",
        "name": "dfst.io",
        "discriminator": "0000",
        "nickname": "DFST",
        "color": "#FA7504",
        "isBot": false,
        "roles": [
          {
            "id": "1182371055923376168",
            "name": "Mina Navigator",
            "color": "#FA7504",
            "position": 100
          },
          {
            "id": "1150768164850913322",
            "name": "zkIgnite Cohort 2",
            "color": "#E97404",
            "position": 96
          },
          {
            "id": "1285544625037115557",
            "name": "MinaCon",
            "color": "#FAFFD6",
            "position": 25
          },
          {
            "id": "1205541869375979601",
            "name": "UMT",
            "color": "#FFFFFF",
            "position": 22
          },
          {
            "id": "1220065449098743838",
            "name": "Node-Operations",
            "color": "#FFFFFF",
            "position": 20
          },
          {
            "id": "1220064445863038996",
            "name": "zkApps",
            "color": "#FFFFFF",
            "position": 19
          },
          {
            "id": "1220065628602503188",
            "name": "Testing",
            "color": "#FFFFFF",
            "position": 18
          },
          {
            "id": "1291345674213920768",
            "name": "Rust-Node",
            "color": "#FFF7F7",
            "position": 17
          },
          {
            "id": "1259816280605851648",
            "name": "Links and Images",
            "color": "#FFFFFE",
            "position": 12
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/guilds/484437221055922177/users/964566918482784306/avatars/6d2f9b5ac3d3e9135840e45e13230dd8.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1215317391118958672",
      "type": "Default",
      "timestamp": "2024-03-07T19:17:25.548+04:00",
      "timestampEdited": "2024-03-07T19:17:35.391+04:00",
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "The other problem is that this implementation above takes a lot of constraints:\n```\napproveBase rows: 13243\n```",
      "author": {
        "id": "964566918482784306",
        "name": "dfst.io",
        "discriminator": "0000",
        "nickname": "DFST",
        "color": "#FA7504",
        "isBot": false,
        "roles": [
          {
            "id": "1182371055923376168",
            "name": "Mina Navigator",
            "color": "#FA7504",
            "position": 100
          },
          {
            "id": "1150768164850913322",
            "name": "zkIgnite Cohort 2",
            "color": "#E97404",
            "position": 96
          },
          {
            "id": "1285544625037115557",
            "name": "MinaCon",
            "color": "#FAFFD6",
            "position": 25
          },
          {
            "id": "1205541869375979601",
            "name": "UMT",
            "color": "#FFFFFF",
            "position": 22
          },
          {
            "id": "1220065449098743838",
            "name": "Node-Operations",
            "color": "#FFFFFF",
            "position": 20
          },
          {
            "id": "1220064445863038996",
            "name": "zkApps",
            "color": "#FFFFFF",
            "position": 19
          },
          {
            "id": "1220065628602503188",
            "name": "Testing",
            "color": "#FFFFFF",
            "position": 18
          },
          {
            "id": "1291345674213920768",
            "name": "Rust-Node",
            "color": "#FFF7F7",
            "position": 17
          },
          {
            "id": "1259816280605851648",
            "name": "Links and Images",
            "color": "#FFFFFE",
            "position": 12
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/guilds/484437221055922177/users/964566918482784306/avatars/6d2f9b5ac3d3e9135840e45e13230dd8.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1215383518184742932",
      "type": "Default",
      "timestamp": "2024-03-07T23:40:11.469+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Hey! I see there are no replies and I'm actually working on the similar ground.\n\nThe idea with .approve* is to approve an account update. It's true that you can also pass a callback as an argument, but in the method, the account update from that callback gets extracted. In more technical terms, the account update passed as an argument gets added as a child account update of the zkApp's account.\n\nAll of these .approve* methods should work towards this goal. For more information check `SmartContract.approve()`. I hope this helps you.",
      "author": {
        "id": "1122802332166520932",
        "name": "illya.papi",
        "discriminator": "0000",
        "nickname": "illya",
        "color": "#C02020",
        "isBot": false,
        "roles": [
          {
            "id": "1090136219045867601",
            "name": "Gov Focus Group",
            "color": "#C02020",
            "position": 107
          },
          {
            "id": "1182371055923376168",
            "name": "Mina Navigator",
            "color": "#FA7504",
            "position": 100
          },
          {
            "id": "1150768164850913322",
            "name": "zkIgnite Cohort 2",
            "color": "#E97404",
            "position": 96
          },
          {
            "id": "1285544625037115557",
            "name": "MinaCon",
            "color": "#FAFFD6",
            "position": 25
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1122802332166520932/7d472e13c746407efa6a79bb6539ca59.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1215963745440763974",
      "type": "Reply",
      "timestamp": "2024-03-09T14:05:48.427+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Thank you for the explanation! Given that I do not have transfers in my contract, only mint, I've looked in more detail in the o1js code how mint is working, and internal.mint() does not call approveBase. Given that I want to disable all other transfers, I've disabled all the transfers with the number of AccountUpdates not equal to zero:\n```typescript\n  @method approveBase(forest: AccountUpdateForest) {\n    forest.isEmpty().assertEquals(Bool(true));\n  }\n```\nThis gives 327 rows, 40 times less than the default implementation, and the tests are passing.",
      "author": {
        "id": "964566918482784306",
        "name": "dfst.io",
        "discriminator": "0000",
        "nickname": "DFST",
        "color": "#FA7504",
        "isBot": false,
        "roles": [
          {
            "id": "1182371055923376168",
            "name": "Mina Navigator",
            "color": "#FA7504",
            "position": 100
          },
          {
            "id": "1150768164850913322",
            "name": "zkIgnite Cohort 2",
            "color": "#E97404",
            "position": 96
          },
          {
            "id": "1285544625037115557",
            "name": "MinaCon",
            "color": "#FAFFD6",
            "position": 25
          },
          {
            "id": "1205541869375979601",
            "name": "UMT",
            "color": "#FFFFFF",
            "position": 22
          },
          {
            "id": "1220065449098743838",
            "name": "Node-Operations",
            "color": "#FFFFFF",
            "position": 20
          },
          {
            "id": "1220064445863038996",
            "name": "zkApps",
            "color": "#FFFFFF",
            "position": 19
          },
          {
            "id": "1220065628602503188",
            "name": "Testing",
            "color": "#FFFFFF",
            "position": 18
          },
          {
            "id": "1291345674213920768",
            "name": "Rust-Node",
            "color": "#FFF7F7",
            "position": 17
          },
          {
            "id": "1259816280605851648",
            "name": "Links and Images",
            "color": "#FFFFFE",
            "position": 12
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/guilds/484437221055922177/users/964566918482784306/avatars/6d2f9b5ac3d3e9135840e45e13230dd8.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "1122802332166520932",
          "name": "illya.papi",
          "discriminator": "0000",
          "nickname": "illya",
          "color": "#C02020",
          "isBot": false,
          "roles": [
            {
              "id": "1090136219045867601",
              "name": "Gov Focus Group",
              "color": "#C02020",
              "position": 107
            },
            {
              "id": "1182371055923376168",
              "name": "Mina Navigator",
              "color": "#FA7504",
              "position": 100
            },
            {
              "id": "1150768164850913322",
              "name": "zkIgnite Cohort 2",
              "color": "#E97404",
              "position": 96
            },
            {
              "id": "1285544625037115557",
              "name": "MinaCon",
              "color": "#FAFFD6",
              "position": 25
            }
          ],
          "avatarUrl": "https://cdn.discordapp.com/avatars/1122802332166520932/7d472e13c746407efa6a79bb6539ca59.png?size=512"
        }
      ],
      "reference": {
        "messageId": "1215383518184742932",
        "channelId": "1215258350577647616",
        "guildId": "484437221055922177"
      }
    },
    {
      "id": "1216052901928239295",
      "type": "Default",
      "timestamp": "2024-03-09T20:00:04.99+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "> What is approveBase() in TokenContract and how to use it?\n> \n> I use token accounts for storage; no tokens are being transferred or burned, only minted. How should I implement the abstract function approveBase() in this case?\n\nI'll try to answer these questions. Docs for `TokenContract` are still in the works.\n\n`TokenContract` defines a number of methods that we expected to become part of a token standard: `transfer()`, `approveAccountUpdates()`, `approveAccountUpdate()`.\n\nAll of these call a single method under the hood: `approveBase()`. It is intended to be a \"master method\" where you define what checks the token contract wants to make on each token account update before allowing it.\n\nYou can of course have other methods on the token contract, and you can also override `transfer()` etc. If you have no use for very general approving of token interactions (say, your token contract shouldn't support zkapps that interact with the token and stuff like that), then you can simply skip  `approveBase()` by not making it a `@method`, and (say) make it throw an error:\n\n```ts\napproveBase() {\n  throw Error('nothing to see here');\n}\n```\n\nI think for many token contracts though, this idea of a method which accepts an arbitrary layout of child account updates is very useful. It addresses the main problem tokens had before in that it was super hard to implement mildly \"complex\" things like zkapps that interacts with tokens.",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1216053999518879794",
      "type": "Default",
      "timestamp": "2024-03-09T20:04:26.676+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "`approveBase()` is left abstract, but it comes with helper methods that make it pretty easy to define arbitrary logic which should run on every token account. A good example is how `this.checkZeroBalanceChange()` is implemented:\n\n```ts\n  checkZeroBalanceChange(updates: AccountUpdateForest) {\n    let totalBalanceChange = Int64.zero;\n\n    this.forEachUpdate(updates, (accountUpdate, usesToken) => {\n      totalBalanceChange = totalBalanceChange.add(\n        Provable.if(usesToken, accountUpdate.balanceChange, Int64.zero)\n      );\n    });\n\n    // prove that the total balance change is zero\n    totalBalanceChange.assertEquals(0);\n  }\n```\n\nThis should look quite \"obvious\" and easily modifiable to your needs. The heavy lifting here is done by `this.forEachUpdate()` which walks the entire tree up to a number of max account updates. The max is 20 and is safe to use because more account updates aren't allowed on berkeley per transaction.",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1216054909301035080",
      "type": "Default",
      "timestamp": "2024-03-09T20:08:03.585+04:00",
      "timestampEdited": "2024-03-09T20:09:14.398+04:00",
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "So, the example which just uses `checkZeroBalanceChange()` is the classical fungible token contract, which allows arbitrary transfers between accounts as long as they cancel out. (Any mint functionality would be implemented in a separate method.)\n\nBut I'm curious if there are use cases for `this.forEachUpdate()` which don't allow transfers, but allow other flexible interactions between arbitrary child account updates",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1216055781229854730",
      "type": "Default",
      "timestamp": "2024-03-09T20:11:31.469+04:00",
      "timestampEdited": "2024-03-09T20:11:58.346+04:00",
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "> The other problem is that this implementation above takes a lot of constraints: 13243\nThis is true, and comes from how many child updates `forEachUpdate()` allows (the constraints mainly come from hashing them and connecting that hash to the public input). The idea is that you could use this one method for basically everything",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1216085370241024071",
      "type": "Reply",
      "timestamp": "2024-03-09T22:09:06.039+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Thank you for the explanations; they are very helpful. \n\nOne clarification: when I try to implement approveBase() with one line that simply throws the error, I'm getting an error during analyzeMethods() call:\n```typescript\n  @method approveBase(forest: AccountUpdateForest) {\n    // https://discord.com/channels/484437221055922177/1215258350577647616\n    // this.checkZeroBalanceChange(forest);\n    // forest.isEmpty().assertEquals(Bool(true));\n    throw Error(\"transfers are not allowed\");\n  }\n```\n```\n● Validators › should compile and deploy contract\n\n    transfers are not allowed\n\n      182 |     // this.checkZeroBalanceChange(forest);\n      183 |     // forest.isEmpty().assertEquals(Bool(true));\n> 184 |     throw Error(\"transfers are not allowed\");\n          |           ^\n      185 |   }\n      186 |\n      187 |   events = {\n\n      at DomainNameContract.approveBase (src/contract/domain-contract.ts:184:11)\n      at DomainNameContract.wrappedMethod (o1js/dist/node/index.cjs:22428:32)\n      at node_modules/o1js/dist/node/index.cjs:23057:58\n      at node_modules/o1js/dist/node/index.cjs:8646:12\n      at node_modules/o1js/dist/node/index.cjs:4685:16\n      at mark_active (src/mina/src/lib/snarky/src/base/snark0.ml:1167:19)\n      at _plV_ (src/mina/src/lib/snarky/src/base/snark0.ml:1287:52)\n      at as_stateful (src/mina/src/lib/snarky/src/base/snark0.ml:755:15)\n      at constraint_system (src/mina/src/lib/snarky/src/base/runners.ml:263:7)\n      at ../../../../../../workspace_root/src/mina/src/lib/snarky/src/base/snark0.ml:1287:19\n      at finalize_is_running (src/mina/src/lib/snarky/src/base/snark0.ml:1272:15)\n      at constraint_system (src/mina/src/lib/snarky/src/base/snark0.ml:1286:7)\n      at Object.constraintSystem (o1js/dist/node/index.cjs:4684:45)\n      at analyzeMethod (o1js/dist/node/index.cjs:8641:19)\n      at Function.analyzeMethods (o1js/dist/node/index.cjs:23055:58)\n      at Object.<anonymous> (tests/contract.test.ts:114:36)\n\n```\nSimple `Field(1).assertEquals(Field(2)) ` also does not work.\n\nWhat is the best way to get the implementation of an abstract method always fail? Seems like the compiler is too smart and does not allow such methods.",
      "author": {
        "id": "964566918482784306",
        "name": "dfst.io",
        "discriminator": "0000",
        "nickname": "DFST",
        "color": "#FA7504",
        "isBot": false,
        "roles": [
          {
            "id": "1182371055923376168",
            "name": "Mina Navigator",
            "color": "#FA7504",
            "position": 100
          },
          {
            "id": "1150768164850913322",
            "name": "zkIgnite Cohort 2",
            "color": "#E97404",
            "position": 96
          },
          {
            "id": "1285544625037115557",
            "name": "MinaCon",
            "color": "#FAFFD6",
            "position": 25
          },
          {
            "id": "1205541869375979601",
            "name": "UMT",
            "color": "#FFFFFF",
            "position": 22
          },
          {
            "id": "1220065449098743838",
            "name": "Node-Operations",
            "color": "#FFFFFF",
            "position": 20
          },
          {
            "id": "1220064445863038996",
            "name": "zkApps",
            "color": "#FFFFFF",
            "position": 19
          },
          {
            "id": "1220065628602503188",
            "name": "Testing",
            "color": "#FFFFFF",
            "position": 18
          },
          {
            "id": "1291345674213920768",
            "name": "Rust-Node",
            "color": "#FFF7F7",
            "position": 17
          },
          {
            "id": "1259816280605851648",
            "name": "Links and Images",
            "color": "#FFFFFE",
            "position": 12
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/guilds/484437221055922177/users/964566918482784306/avatars/6d2f9b5ac3d3e9135840e45e13230dd8.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "568421780331692042",
          "name": "mitschabaude",
          "discriminator": "0000",
          "nickname": "gregor",
          "color": "#6991D8",
          "isBot": false,
          "roles": [
            {
              "id": "751144417951219713",
              "name": "Core Engineers",
              "color": "#6991D8",
              "position": 122
            },
            {
              "id": "1075313326499823676",
              "name": "zkApp E2E Tester",
              "color": "#E74C3C",
              "position": 117
            },
            {
              "id": "916351299988107364",
              "name": "zkApps-bootcamp-2021",
              "color": "#F19924",
              "position": 95
            }
          ],
          "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
        }
      ],
      "reference": {
        "messageId": "1216052901928239295",
        "channelId": "1215258350577647616",
        "guildId": "484437221055922177"
      }
    },
    {
      "id": "1216089191994364024",
      "type": "Reply",
      "timestamp": "2024-03-09T22:24:17.216+04:00",
      "timestampEdited": "2024-03-09T22:24:26.249+04:00",
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "My fault: should remove the @method word, and then this code works:\n```typescript\napproveBase(forest: AccountUpdateForest) {\n    // https://discord.com/channels/484437221055922177/1215258350577647616\n    // this.checkZeroBalanceChange(forest);\n    //forest.isEmpty().assertEquals(Bool(true));\n    throw Error(\"transfers are not allowed\");\n  }\n```",
      "author": {
        "id": "964566918482784306",
        "name": "dfst.io",
        "discriminator": "0000",
        "nickname": "DFST",
        "color": "#FA7504",
        "isBot": false,
        "roles": [
          {
            "id": "1182371055923376168",
            "name": "Mina Navigator",
            "color": "#FA7504",
            "position": 100
          },
          {
            "id": "1150768164850913322",
            "name": "zkIgnite Cohort 2",
            "color": "#E97404",
            "position": 96
          },
          {
            "id": "1285544625037115557",
            "name": "MinaCon",
            "color": "#FAFFD6",
            "position": 25
          },
          {
            "id": "1205541869375979601",
            "name": "UMT",
            "color": "#FFFFFF",
            "position": 22
          },
          {
            "id": "1220065449098743838",
            "name": "Node-Operations",
            "color": "#FFFFFF",
            "position": 20
          },
          {
            "id": "1220064445863038996",
            "name": "zkApps",
            "color": "#FFFFFF",
            "position": 19
          },
          {
            "id": "1220065628602503188",
            "name": "Testing",
            "color": "#FFFFFF",
            "position": 18
          },
          {
            "id": "1291345674213920768",
            "name": "Rust-Node",
            "color": "#FFF7F7",
            "position": 17
          },
          {
            "id": "1259816280605851648",
            "name": "Links and Images",
            "color": "#FFFFFE",
            "position": 12
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/guilds/484437221055922177/users/964566918482784306/avatars/6d2f9b5ac3d3e9135840e45e13230dd8.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [
        {
          "emoji": {
            "id": "",
            "name": "\uD83D\uDC4D",
            "code": "thumbsup",
            "isAnimated": false,
            "imageUrl": "https://cdn.jsdelivr.net/gh/twitter/twemoji@latest/assets/svg/1f44d.svg"
          },
          "count": 1,
          "users": [
            {
              "id": "568421780331692042",
              "name": "mitschabaude",
              "discriminator": "0000",
              "nickname": "gregor",
              "isBot": false,
              "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
            }
          ]
        }
      ],
      "mentions": [],
      "reference": {
        "messageId": "1216085370241024071",
        "channelId": "1215258350577647616",
        "guildId": "484437221055922177"
      }
    },
    {
      "id": "1216103934419271862",
      "type": "Default",
      "timestamp": "2024-03-09T23:22:52.084+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Exactly. Not putting method on it makes it just like any normal piece of code that doesn't do anything unless you call it",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    }
  ],
  "messageCount": 11
}