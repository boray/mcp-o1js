{
  "guild": {
    "id": "484437221055922177",
    "name": "Mina Protocol",
    "iconUrl": "https://cdn.discordapp.com/icons/484437221055922177/60f5907d2f7e3804b704a7153cae7768.png?size=512"
  },
  "channel": {
    "id": "1253373938923475045",
    "type": "GuildPublicThread",
    "categoryId": "1047214314349658172",
    "category": "zkapps-questions",
    "name": "How to add a JsonProof to publicOutput of a proof? I would like to return the previousProof.toJSON()",
    "topic": null
  },
  "dateRange": {
    "after": null,
    "before": null
  },
  "exportedAt": "2025-04-23T17:55:51.3087486+04:00",
  "messages": [
    {
      "id": "1253373938923475045",
      "type": "Default",
      "timestamp": "2024-06-20T19:40:33.601+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "I want to create a recursive proof offchain on the Protokit L2,  with the previous proof + additional private input(s), but would also like the verifier to know\nthe previous proof. So essentially if the recipent of the final proof would get a list of all nested proofs.   Is this possible by outputting the previous proof as a Json.",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1253377590748774573",
      "type": "Default",
      "timestamp": "2024-06-20T19:55:04.264+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Hey @Rohan, you cant output a proof, but you can merge proof outputs together pretty easily",
      "author": {
        "id": "374663548174991362",
        "name": "maht0rz",
        "discriminator": "0000",
        "nickname": "maht0rz",
        "color": "#8B50FF",
        "isBot": false,
        "roles": [
          {
            "id": "846838836649525259",
            "name": "Mina Foundation",
            "color": "#8B50FF",
            "position": 138
          },
          {
            "id": "1146001284516827148",
            "name": "MF Engineering",
            "color": "#9B59B6",
            "position": 135
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "1090136219045867601",
            "name": "Gov Focus Group",
            "color": "#C02020",
            "position": 107
          },
          {
            "id": "1043261559478165567",
            "name": "ZK-peer-reviewer",
            "color": "#F87607",
            "position": 104
          },
          {
            "id": "1044272767060672624",
            "name": "Cohort 0 Mentor",
            "color": "#A84300",
            "position": 102
          },
          {
            "id": "1182371055923376168",
            "name": "Mina Navigator",
            "color": "#FA7504",
            "position": 100
          },
          {
            "id": "1121063832555634799",
            "name": "zkIgnite Cohort 1",
            "color": "#F38705",
            "position": 97
          },
          {
            "id": "754653466344947782",
            "name": "QA Task Force",
            "color": "#B2F3B8",
            "position": 80
          },
          {
            "id": "1083404176391929916",
            "name": "Mina Community Creator",
            "color": "#F68B8B",
            "position": 74
          },
          {
            "id": "1285544625037115557",
            "name": "MinaCon",
            "color": "#FAFFD6",
            "position": 25
          },
          {
            "id": "1205541869375979601",
            "name": "UMT",
            "color": "#FFFFFF",
            "position": 22
          },
          {
            "id": "1220064445863038996",
            "name": "zkApps",
            "color": "#FFFFFF",
            "position": 19
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/374663548174991362/f6511739774fe43bc64418c6c064e1f4.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "1232259393198882847",
          "name": "rohanjacin",
          "discriminator": "0000",
          "nickname": "Rohan",
          "color": null,
          "isBot": false,
          "roles": [],
          "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
        }
      ]
    },
    {
      "id": "1253661529245487135",
      "type": "Default",
      "timestamp": "2024-06-21T14:43:20.477+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "@maht0rz Thanks for letting me know, I was a bit confused with regards to the previous proof being a public or private input, in some Incrementally Verifiable Computation diagrams/https://www.youtube.com/watch?v=UNwlBq1FQ3E&t=485s  witness was explicitly mentioned whrereas previous proofs we shown along with public inputs. Anyways exposing the previous proof would have not make it ZK. \n \nI tried to get some info on merging proof outputs, apart from SNARK workers in mina i havent really seen any examples or in the docs of mina any note regarding it. Any example pseduo code would be nice. Also what kind of use case would be a good example? Thanks",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [
        {
          "title": "Proof-Carrying Data from Accumulation Schemes (BUSec seminar)",
          "url": "https://www.youtube.com/watch?v=UNwlBq1FQ3E&start=485",
          "timestamp": null,
          "description": "",
          "color": "#FF0000",
          "author": {
            "name": "Nick Spooner",
            "url": "https://www.youtube.com/channel/UCgQEJbDSKGbFELI_W5JhTvw"
          },
          "thumbnail": {
            "url": "https://images-ext-1.discordapp.net/external/PvR79yopsRWLjhgDUjRJ0Kf7mPbKU2UGiIUkfEYe_Xc/https/i.ytimg.com/vi/UNwlBq1FQ3E/sddefault.jpg",
            "width": 640,
            "height": 480
          },
          "video": {
            "url": "https://www.youtube.com/embed/UNwlBq1FQ3E?start=485",
            "width": 1280,
            "height": 720
          },
          "images": [],
          "fields": []
        }
      ],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "374663548174991362",
          "name": "maht0rz",
          "discriminator": "0000",
          "nickname": "maht0rz",
          "color": "#8B50FF",
          "isBot": false,
          "roles": [
            {
              "id": "846838836649525259",
              "name": "Mina Foundation",
              "color": "#8B50FF",
              "position": 138
            },
            {
              "id": "1146001284516827148",
              "name": "MF Engineering",
              "color": "#9B59B6",
              "position": 135
            },
            {
              "id": "1075313326499823676",
              "name": "zkApp E2E Tester",
              "color": "#E74C3C",
              "position": 117
            },
            {
              "id": "1090136219045867601",
              "name": "Gov Focus Group",
              "color": "#C02020",
              "position": 107
            },
            {
              "id": "1043261559478165567",
              "name": "ZK-peer-reviewer",
              "color": "#F87607",
              "position": 104
            },
            {
              "id": "1044272767060672624",
              "name": "Cohort 0 Mentor",
              "color": "#A84300",
              "position": 102
            },
            {
              "id": "1182371055923376168",
              "name": "Mina Navigator",
              "color": "#FA7504",
              "position": 100
            },
            {
              "id": "1121063832555634799",
              "name": "zkIgnite Cohort 1",
              "color": "#F38705",
              "position": 97
            },
            {
              "id": "754653466344947782",
              "name": "QA Task Force",
              "color": "#B2F3B8",
              "position": 80
            },
            {
              "id": "1083404176391929916",
              "name": "Mina Community Creator",
              "color": "#F68B8B",
              "position": 74
            },
            {
              "id": "1285544625037115557",
              "name": "MinaCon",
              "color": "#FAFFD6",
              "position": 25
            },
            {
              "id": "1205541869375979601",
              "name": "UMT",
              "color": "#FFFFFF",
              "position": 22
            },
            {
              "id": "1220064445863038996",
              "name": "zkApps",
              "color": "#FFFFFF",
              "position": 19
            }
          ],
          "avatarUrl": "https://cdn.discordapp.com/avatars/374663548174991362/f6511739774fe43bc64418c6c064e1f4.png?size=512"
        }
      ]
    },
    {
      "id": "1253966588730933299",
      "type": "Default",
      "timestamp": "2024-06-22T10:55:32.326+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "@maht0rz a related question. Is it possible to hash the proof string from JsonProof ? JsonProof has a proof: string",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "374663548174991362",
          "name": "maht0rz",
          "discriminator": "0000",
          "nickname": "maht0rz",
          "color": "#8B50FF",
          "isBot": false,
          "roles": [
            {
              "id": "846838836649525259",
              "name": "Mina Foundation",
              "color": "#8B50FF",
              "position": 138
            },
            {
              "id": "1146001284516827148",
              "name": "MF Engineering",
              "color": "#9B59B6",
              "position": 135
            },
            {
              "id": "1075313326499823676",
              "name": "zkApp E2E Tester",
              "color": "#E74C3C",
              "position": 117
            },
            {
              "id": "1090136219045867601",
              "name": "Gov Focus Group",
              "color": "#C02020",
              "position": 107
            },
            {
              "id": "1043261559478165567",
              "name": "ZK-peer-reviewer",
              "color": "#F87607",
              "position": 104
            },
            {
              "id": "1044272767060672624",
              "name": "Cohort 0 Mentor",
              "color": "#A84300",
              "position": 102
            },
            {
              "id": "1182371055923376168",
              "name": "Mina Navigator",
              "color": "#FA7504",
              "position": 100
            },
            {
              "id": "1121063832555634799",
              "name": "zkIgnite Cohort 1",
              "color": "#F38705",
              "position": 97
            },
            {
              "id": "754653466344947782",
              "name": "QA Task Force",
              "color": "#B2F3B8",
              "position": 80
            },
            {
              "id": "1083404176391929916",
              "name": "Mina Community Creator",
              "color": "#F68B8B",
              "position": 74
            },
            {
              "id": "1285544625037115557",
              "name": "MinaCon",
              "color": "#FAFFD6",
              "position": 25
            },
            {
              "id": "1205541869375979601",
              "name": "UMT",
              "color": "#FFFFFF",
              "position": 22
            },
            {
              "id": "1220064445863038996",
              "name": "zkApps",
              "color": "#FFFFFF",
              "position": 19
            }
          ],
          "avatarUrl": "https://cdn.discordapp.com/avatars/374663548174991362/f6511739774fe43bc64418c6c064e1f4.png?size=512"
        }
      ]
    },
    {
      "id": "1253971211361189898",
      "type": "Default",
      "timestamp": "2024-06-22T11:13:54.447+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "@maht0rz whats does Proof tag()  do ? https://docs.minaprotocol.com/zkapps/o1js-reference/classes/Proof#tag Basically i want an identifier to a given proof.",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [
        {
          "title": "Mina Documentation",
          "url": "https://docs.minaprotocol.com/zkapps/o1js-reference/classes/Proof",
          "timestamp": null,
          "description": "Website for documentation about Mina Protocol",
          "thumbnail": {
            "url": "https://images-ext-1.discordapp.net/external/_PJlmeDNad-_70g7jbEdYnu0Z3mezgosb1bPK642OJE/https/docs.minaprotocol.com/img/common/mina-logo.png",
            "width": 1120,
            "height": 630
          },
          "images": [],
          "fields": []
        }
      ],
      "stickers": [],
      "reactions": [],
      "mentions": [
        {
          "id": "374663548174991362",
          "name": "maht0rz",
          "discriminator": "0000",
          "nickname": "maht0rz",
          "color": "#8B50FF",
          "isBot": false,
          "roles": [
            {
              "id": "846838836649525259",
              "name": "Mina Foundation",
              "color": "#8B50FF",
              "position": 138
            },
            {
              "id": "1146001284516827148",
              "name": "MF Engineering",
              "color": "#9B59B6",
              "position": 135
            },
            {
              "id": "1075313326499823676",
              "name": "zkApp E2E Tester",
              "color": "#E74C3C",
              "position": 117
            },
            {
              "id": "1090136219045867601",
              "name": "Gov Focus Group",
              "color": "#C02020",
              "position": 107
            },
            {
              "id": "1043261559478165567",
              "name": "ZK-peer-reviewer",
              "color": "#F87607",
              "position": 104
            },
            {
              "id": "1044272767060672624",
              "name": "Cohort 0 Mentor",
              "color": "#A84300",
              "position": 102
            },
            {
              "id": "1182371055923376168",
              "name": "Mina Navigator",
              "color": "#FA7504",
              "position": 100
            },
            {
              "id": "1121063832555634799",
              "name": "zkIgnite Cohort 1",
              "color": "#F38705",
              "position": 97
            },
            {
              "id": "754653466344947782",
              "name": "QA Task Force",
              "color": "#B2F3B8",
              "position": 80
            },
            {
              "id": "1083404176391929916",
              "name": "Mina Community Creator",
              "color": "#F68B8B",
              "position": 74
            },
            {
              "id": "1285544625037115557",
              "name": "MinaCon",
              "color": "#FAFFD6",
              "position": 25
            },
            {
              "id": "1205541869375979601",
              "name": "UMT",
              "color": "#FFFFFF",
              "position": 22
            },
            {
              "id": "1220064445863038996",
              "name": "zkApps",
              "color": "#FFFFFF",
              "position": 19
            }
          ],
          "avatarUrl": "https://cdn.discordapp.com/avatars/374663548174991362/f6511739774fe43bc64418c6c064e1f4.png?size=512"
        }
      ]
    },
    {
      "id": "1253971330500657232",
      "type": "Default",
      "timestamp": "2024-06-22T11:14:22.852+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "best identifier to a proof is the verification key i think",
      "author": {
        "id": "374663548174991362",
        "name": "maht0rz",
        "discriminator": "0000",
        "nickname": "maht0rz",
        "color": "#8B50FF",
        "isBot": false,
        "roles": [
          {
            "id": "846838836649525259",
            "name": "Mina Foundation",
            "color": "#8B50FF",
            "position": 138
          },
          {
            "id": "1146001284516827148",
            "name": "MF Engineering",
            "color": "#9B59B6",
            "position": 135
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "1090136219045867601",
            "name": "Gov Focus Group",
            "color": "#C02020",
            "position": 107
          },
          {
            "id": "1043261559478165567",
            "name": "ZK-peer-reviewer",
            "color": "#F87607",
            "position": 104
          },
          {
            "id": "1044272767060672624",
            "name": "Cohort 0 Mentor",
            "color": "#A84300",
            "position": 102
          },
          {
            "id": "1182371055923376168",
            "name": "Mina Navigator",
            "color": "#FA7504",
            "position": 100
          },
          {
            "id": "1121063832555634799",
            "name": "zkIgnite Cohort 1",
            "color": "#F38705",
            "position": 97
          },
          {
            "id": "754653466344947782",
            "name": "QA Task Force",
            "color": "#B2F3B8",
            "position": 80
          },
          {
            "id": "1083404176391929916",
            "name": "Mina Community Creator",
            "color": "#F68B8B",
            "position": 74
          },
          {
            "id": "1285544625037115557",
            "name": "MinaCon",
            "color": "#FAFFD6",
            "position": 25
          },
          {
            "id": "1205541869375979601",
            "name": "UMT",
            "color": "#FFFFFF",
            "position": 22
          },
          {
            "id": "1220064445863038996",
            "name": "zkApps",
            "color": "#FFFFFF",
            "position": 19
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/374663548174991362/f6511739774fe43bc64418c6c064e1f4.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1253974609108271174",
      "type": "Default",
      "timestamp": "2024-06-22T11:27:24.533+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "But that's not unique to a witness",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1253976000090341386",
      "type": "Default",
      "timestamp": "2024-06-22T11:32:56.169+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "could probably use some publicOutput unrelated to witness but associated to that proof?",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1254321565605302372",
      "type": "Default",
      "timestamp": "2024-06-23T10:26:05.408+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "What's the use case? Why don't you just use the JSON proof string as the identifier",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1254747318222065697",
      "type": "Default",
      "timestamp": "2024-06-24T14:37:52.742+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Ok, well am trying to design a card game of bluff. The card proof should be its  anonymous identifier but its too big to move around, i was under the impression that it could hash and reduce it to a field element.",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1254784482163163156",
      "type": "Default",
      "timestamp": "2024-06-24T17:05:33.316+04:00",
      "timestampEdited": "2024-06-24T17:05:43.799+04:00",
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Do you need to use the identifier in your provable code? if not you could just hash it with any method to hash a string",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1254808623616360609",
      "type": "Default",
      "timestamp": "2024-06-24T18:41:29.087+04:00",
      "timestampEdited": "2024-06-24T19:43:16.491+04:00",
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "Yes. Well, as per the use case and the rules of the game of \"Bluff\" in general, when a player plays a hand he/she needs to prove that the card(s) in the hand belongs from the deck (from which cards was distributed to all players randomly)  so essentially when creating the hand proof the player needs to assert that the a given cardproof (private input) belongs to the set of proofs (public input ) in the deck, so this hand proof has to have a public input which is a list of all the card proofs (cardproof times 52) , this is the reason that I wanted an identifier to the  cardproof so that the public input to the hand proof is just 32 times 52  bytes (still big but comparable to proof sizes of other systems).  \n\nPickles or atleast the precompiled mina lib outputs the proof in base64 i just saw which just leaves SHA as an option, but proving times will escalated soon for a hand of max 4 cards.  \n\nOne question i have is does Pickles/Kimchi have this restriction of Base64 encoding or does mina impose it ?",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1255090756733898822",
      "type": "Default",
      "timestamp": "2024-06-25T13:22:34.864+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "I would focus away from that particular base64 proof encoding (which you won't be able to use in provable code anyway) and would focus more on returning a field element from the card proof which uniquely identifies that card, yet doesn't reveal it",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1255090841039667301",
      "type": "Default",
      "timestamp": "2024-06-25T13:22:54.964+04:00",
      "timestampEdited": "2024-06-25T13:23:35.655+04:00",
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "and then use that card proof public output as identifier",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1255090910593679370",
      "type": "Default",
      "timestamp": "2024-06-25T13:23:11.547+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "it doesn't have to be related to the content of the proof base64 at all",
      "author": {
        "id": "568421780331692042",
        "name": "mitschabaude",
        "discriminator": "0000",
        "nickname": "gregor",
        "color": "#6991D8",
        "isBot": false,
        "roles": [
          {
            "id": "751144417951219713",
            "name": "Core Engineers",
            "color": "#6991D8",
            "position": 122
          },
          {
            "id": "1075313326499823676",
            "name": "zkApp E2E Tester",
            "color": "#E74C3C",
            "position": 117
          },
          {
            "id": "916351299988107364",
            "name": "zkApps-bootcamp-2021",
            "color": "#F19924",
            "position": 95
          }
        ],
        "avatarUrl": "https://cdn.discordapp.com/avatars/568421780331692042/e1669a88013d05eb102f3e9b75279562.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1255526358050668664",
      "type": "Default",
      "timestamp": "2024-06-26T18:13:30.311+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "I thought about your point. Here's how i think i might do it.",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1255526502255165462",
      "type": "Default",
      "timestamp": "2024-06-26T18:14:04.692+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "1. The players are part of a semaphore protocol group, each have a shared secret with the Dealer/House. Each generate their member proof\nat the start of the game. The secret is shared via email/p2p messenger handle etc. (basically out of band).\n\n2. The players also rely on derived session keys for each transaction\nwith the dealer/house. A waku (p2p private channel) is setup using the shared secret between a player and dealer/house. The session key generation on both ends could use a HKDF with the shared secret as the key material and incremental counter as the info ( maybe a better way).",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1255526594210955305",
      "type": "Default",
      "timestamp": "2024-06-26T18:14:26.616+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "3. The house/dealer generates and distributes cardids unique to a player\nin the following way.\n   a. Create a card proof with private inputs \n         card rank (A, 2, 3, .. J, Q, K  etc), suite, session key\n   b. The card proof public output is the posiedon hash of the field\n      elements rank, suite, session key. This will the card id.\n   c. The card public inputs will be the rank, suite and\n      posiedonhash(session key). The card can be verified by the\n      players by iterating over the possible ranks, suites combinations. Since the verifcation cost is very low it should be ok.\n   d. A player receives all his/her cards as an array of card proofs\n      in its entity. One card proof is around 30kB so 13 cards will be around 400kB, it may still be ok given that this will happen just once at the start of the game.\n   e. The players also receive the deck proof which is the recursive\n      proof of all the cards, in addition to the merkle tree root of the deck.",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1255526904564551740",
      "type": "Default",
      "timestamp": "2024-06-26T18:15:40.61+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "4. When a player has to play a hand (1 or 2 or 3 or 4 cards) \n   the players creates a hand proof(recursive card proof) in the following way\n   a. The proof contains a the following private inputs, the \n         card proof the session key and the rank.     \n   b. The proof output will be a posideon hash of the session key\n      along with the card proof public output (original card id), this output will be a hand id (nullified card id).\n   c. The public inputs shall be the posiedon hash of the session key,\n      and the rank i.e claim the player makes (e.g 1 Ace, 2 Ace ..etc )\n   d. In case of a single card hand the proof verifies if the claim\n      is true if the session key hash is known.\n   e. In case of multiple card hand the proof will be a recursive\n      card proof, and hence the proof verifies if all card proofs\n      are true as per the claim i.e rank, provided the hash of the session key as a public input is known. The proof output in this case will be an array of unique hand id (essentially nullified card id's)",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1255527261654745192",
      "type": "Default",
      "timestamp": "2024-06-26T18:17:05.747+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "5. When a player calls a bluff, and \n   a. In case its not a bluff then the following happens. \n      The session key of the player who played the hand is shared\n       with the player who tried to call the bluff. The dealer/house shares this session key via the waku private channel with the current player.This allows a player to verify the hand proof at his/her end, it also allows the player to know the original card ids in the hand in the following way\n         \n         i. The dealer/house maintains a merkel tree for each round of play, of the cards that are in the hand of the current player and also of the previous player(s). By round i mean until everyone passes and have no hands to play for the given rank. So\n        the size of the merkel tree could be max 52 depth. \n         \n        ii. The dealer/house sends this tree to the player that tried to called the bluff, the player also has with him/her the list of hand ids of the hand as part of the hand proof sent to the dealer/house. The index of this list is the leaf index of the merkle tree and the value at the index in the merkle tree is the original card id of the card that was distributed to the player. In this way the player now knows the real suite of the card by simply hashing the card id with of the hand rank, the session key of the player who played the hand and a combination of 4 suite values which ever combination equates to the hand id in question.",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1255527679067947110",
      "type": "Default",
      "timestamp": "2024-06-26T18:18:45.266+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "5.a (continuation ...)\n        iii. In case when there are multiple hands, only the top most hand is verified, the hands of the other players are not verified, here everthing happens as in ii) but now the player has to compute the hash of a combination of rank (1-13), suite(1-4) except the combinations already used in the hand(s) above.\n        In the worst case the combinations would be 52 hash computations, which is still ok.\n\n        iv. The dealer deletes the merkle tree for this round, a point to note is that the dealer also has to provide a proof that the card ids in the hand merkle tree are indeed from the primary merkle tree of its deck when the game started, I think this is possible, but thought about its circuit. So essentially the player-dealer transcation size would be the size of the hand merkle tree and the size of the deck proof.\n\n   b. In case its a bluff then the following happens.\n      i. The player that bluffed gets all the cards in his/her hand back.\n      ii. In case if there were other previous hands played then the same steps follow as in 5a (i-iv)",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    },
    {
      "id": "1255527826187354132",
      "type": "Default",
      "timestamp": "2024-06-26T18:19:20.342+04:00",
      "timestampEdited": null,
      "callEndedTimestamp": null,
      "isPinned": false,
      "content": "6. The game score if maintained by the dealer/house as map of player- card count in a provable merkle map.\n\n7. All proofs are generated off-chain. \n\nNote: This is just my chain of thoughts, would love to know your suggestions. Am only a 1 month baby to ZK, mina. Also hashing of\nrank, suite and session key as an output of the card proof is\nviolating the zero knowledge part of the proof, but still has\nDLP hardness in my view, well that the best i could come up with.\n\n\n\n<EOF>",
      "author": {
        "id": "1232259393198882847",
        "name": "rohanjacin",
        "discriminator": "0000",
        "nickname": "Rohan",
        "color": null,
        "isBot": false,
        "roles": [],
        "avatarUrl": "https://cdn.discordapp.com/avatars/1232259393198882847/976f18d75ee557690b09bdf754db34f3.png?size=512"
      },
      "attachments": [],
      "embeds": [],
      "stickers": [],
      "reactions": [],
      "mentions": []
    }
  ],
  "messageCount": 22
}